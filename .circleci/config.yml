# Python CircleCI 2.0 configuration file

version: 2
references:
  container_python310: &container_python310
    docker:
      - image: cimg/python:3.10.11
      - name: localstack
        image: localstack/localstack:2.0.2
    working_directory: ~/repo

  restore_repo: &restore_repo
    restore_cache:
      keys:
        - v0-repo-{{ .Branch }}-{{ .Revision }}
        - v0-repo-{{ .Branch }}
        - v0-repo

  save_repo: &save_repo
    save_cache:
      key: v0-repo-{{ .Branch }}-{{ .Revision }}
      paths:
        - ~/repo
  save_dependencies310: &save_dependencies310
    save_cache:
      paths:
        - ~/venv310
      key: v0-dependencies310-{{ checksum "requirements.txt"}}-{{ checksum "requirements-dev.txt" }}

  restore_dependencies310: &restore_dependencies310
    restore_cache:
      keys:
        - v0-dependencies310-{{ checksum "requirements.txt" }}-{{ checksum "requirements-dev.txt" }}
        - v0-dependencies310-

jobs:
  install_and_test_310:
    <<: *container_python310
    steps:
      - *restore_repo
      - checkout
      - *save_repo
      - run:
          name: Install virtualenv
          command: pip install --user --upgrade virtualenv

      - run:
          name: Install dependencies
          command: |
            virtualenv ~/venv310
            . ~/venv310/bin/activate
            pip install -r requirements.txt
            pip install -r requirements-dev.txt
      - run :
          name: Run tests
          environment:
            LOCALSTACK_HOST: localstack
          command: |
            . ~/venv310/bin/activate
            nose2 -v --with-coverage cumulus_process

  deploy:
    <<: *container_python310
    steps:
      - checkout
      - *restore_repo
      - *restore_dependencies310
      - add_ssh_keys:
          fingerprints:
            - "3a:8d:f7:0d:de:79:98:bc:56:10:83:ab:c1:ee:3d:30"
      - run:
          name: Push tag to github
          command: |
            yum update && yum install git
            VERSION=`awk -F\' '{print $2,$4}' cumulus_process/version.py`

            # Only tag and release if the version doesn't already exist
            if [ -z $(git ls-remote --tags origin | grep $VERSION) ]; then
              git tag $VERSION
              echo "Pushing tag ${VERSION}"
              git push origin $VERSION
            fi
      - run:
          name: Deploy to PyPi
          command: |
            . ~/venv310/bin/activate
            pip install twine
            python setup.py sdist
            twine upload --skip-existing --username "${PYPI_USER}" --password "${PYPI_PASS}" dist/*

workflows:
  version: 2
  build_test_310_deploy:
    jobs:
      - install_and_test_310
      - deploy:
          requires:
            - install_and_test_310
          filters:
            branches:
              only: master
